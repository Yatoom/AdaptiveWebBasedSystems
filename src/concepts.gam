$options { default.properties "event;strict"} 

General{
        ->(child) Chess
        ->(child) Starters
        ->(child) Optional
        ->(child) Professional
        #suitability:Boolean = 'true'
        #visited:Integer = '0'
        #resource ='~ return "[[=layout.xhtml]]";'
        #visitedChilds:Integer = '0'
        #visitedAllChilds:Boolean = 'false'
        event + '
            if (${#suitability}) { 
                ${#visited}++;
            }
            
            if (${#visited} == 1) { 
                ${<-(child)#visitedChilds}++;
                if (${->(child)}.length == 0) {
                    ${#visitedAllChilds} = true;
                }
            }

            if (${#visited} == 1) { 
                Object siblings[] = ${<-(child)=>(child)#visitedAllChilds};
                Object siblingss[] = ${<-(child)->(child)};
                boolean siblings_check = true;
                for (int i = 0; i < siblings.length; i++) {
                    if (!siblingss[i].equals(${.})) {
                        siblings_check = siblings_check && ((Boolean) siblings[i]); 
                    }
                }
                ${<-(child)#visitedAllChilds} = siblings_check;
            }
            if (${->(child)}.length > 0) {
                boolean output = true;
                Object[] childs = ${=>(child)#visitedAllChilds};
                Object[] childss = ${=>(child)#visited};
                for (int i = 0; i < childs.length; i++) {
                    output = output && ((Boolean) childs[i]) && ((Integer) childss[i]) > 0;
                }
                if (${#visitedChilds} == ${->(child)}.length) {
                    output = output && true; 
                } else {
                    output = output && false;
                }
                ${#visitedAllChilds} = output;
            }          
        '
}
KnowledgeQuiz {
        ->(extends) General
        title 'Knowledge Quiz'
        h1 'Test your knowledge'
        #content:String = '~ return "[[=xml/quiz.xhtml]]";'
        #piece_knowledge:Double = '-1.0'
        #alge_knowledge:Double = '-1.0'
        #score = '(${KnowledgeQuiz#piece_knowledge}*5+${KnowledgeQuiz#alge_knowledge})/6'
        #taken = '${KnowledgeQuiz#piece_knowledge}>= 0 && ${KnowledgeQuiz#alge_knowledge}>=0'
        #suitability:Boolean = '!${KnowledgeQuiz#taken}'
        event ''
}
Chess{
        ->(extends) General
        title 'Home'
        #[order]:Integer = '1'
        h1 'Welcome to the Chess guide'
        #content:String ='~ return "[[=xml/home.xhtml]]";'
}

Starters{
        ->(extends) General
        ->(child) IntroductionOfTheChessPieces
        ->(child) Check
        ->(child) FormalGameRules
        ->(child) CheckmatePatterns
        ->(child) FirstAdvice
        ->(child) Notation

        #[order]:Integer = '2'
	title 'Elementary'
        h1 'Tutorial for beginners: Introduction of the Game'
	#content:String ='~ return "[[=xml/starters.xhtml]]";'
	#suit:String ='~ return "[[=xml/suitable.xhtml]]";'
	
}

IntroductionOfTheChessPieces{
        ->(extends) Starters
        ->(child) Pawn
        ->(child) Knight
        ->(child) Bishop
        ->(child) Rook
        ->(child) Queen
        ->(child) King

        #[order]:Integer = '1'
        title 'Chess Pieces Introduction'
        h1 'Introduction to the Chess Pieces'
        #content:String ='~ return "[[=xml/introboardpieces.xhtml]]";'

}
Pawn{
        
        ->(extends)IntroductionOfTheChessPieces

        #[order]:Integer = '1'
        title 'Pawn'
        h1 'The Pawn'
        #content:String ='~ return "[[=xml/start/pawn.xhtml]]";'

}
Knight{
        
        ->(extends)IntroductionOfTheChessPieces

        #[order]:Integer = '2'
        title 'Knight'
        h1 'The Knight'
        #content:String ='~ return "[[=xml/start/knight.xhtml]]";'

}


Bishop{
        
        ->(extends)IntroductionOfTheChessPieces

        #[order]:Integer = '3'
        title 'Bishop'
        h1 'The Bishop'
        #content:String ='~ return "[[=xml/start/bishop.xhtml]]";'

}
Rook{
        
        ->(extends)IntroductionOfTheChessPieces

        #[order]:Integer = '4'
        title 'Rook'
        h1 'The Rook'
        #content:String ='~ return "[[=xml/start/rook.xhtml]]";'

}
Queen{
        
        ->(extends)IntroductionOfTheChessPieces

        #[order]:Integer = '5'
        title 'Queen'
        h1 'The Queen'
        #content:String ='~ return "[[=xml/start/queen.xhtml]]";'

}
King{
        
        ->(extends)IntroductionOfTheChessPieces

        #[order]:Integer = '6'
        title 'King'
        h1 'The King'
        #content:String ='~ return "[[=xml/start/king.xhtml]]";'

}

Check{
        ->(extends) Starters

        #suitability:Boolean = '${IntroductionOfTheChessPieces#visited} > 0'

        #[order]:Integer = '2'
        title 'Game Endings and Check'
        h1 'Game Ending: Check, Checkmate and Stalemate'
        #content:String ='~ return "[[=xml/start/check.xhtml]]";'
}

FormalGameRules{
        ->(extends) Starters

        #suitability:Boolean = '${Check#visited} > 0'

        #[order]:Integer = '4'
        title 'General Game Rules'
        h1 'Formal Game Rules of Chess'
        #content:String ='~ return "[[=xml/start/rules.xhtml]]";'

}
CheckmatePatterns{
        ->(extends) Starters

        #suitability:Boolean = '${Check#visited} > 0'

        #[order]:Integer = '3'
        title 'Simple patterns'
        h1 'Checkmating patterns: examples of checkmate positions'
        #content:String ='~ return "[[=xml/start/matingpatterns.xhtml]]";'


}
FirstAdvice{
        ->(extends) Starters
        ->(child) OpeningWise
        ->(child) MakingWiseCaptures

        #suitability:Boolean = '${Check#visited} > 0'

        #[order]:Integer = '5'
        title 'First Guidance'
        h1 'First Guidance and Advice for Playing Chess'
        #content:String ='~ return "[[=placeholder.xhtml]]";'

}
OpeningWise{
        
        ->(extends) FirstAdvice

        #[order]:Integer = '1'
        title 'First Advice'
        h1 'Opening Wise'
        #content:String ='~ return "[[=openingwise.xhtml]]";'

}


MakingWiseCaptures{
        
        ->(extends) FirstAdvice

        #[order]:Integer = '2'
        title 'Making Wise Captures'
        h1 'Making Wise Captures'
        #content:String ='~ return "[[=xml/start/wisecaptures.xhtml]]";'

}
Notation{
        ->(extends)Starters

        #suitability:Boolean = '${Check#visited} > 0'

        #[order]:Integer = '6'
        title 'Notation of Chess Moves'
        h1 'Making Wise Captures'
        #content:String ='~ return "[[=xml/start/notation.xhtml]]";'
}

Optional{
        ->(extends)General
        ->(child)Quotes
        ->(child)PawnGame
        #[order]:Integer = '3'
        title 'Optional Material'
        h1 'Making Wise Captures'
        #content:String ='~ return "[[=xml/optional.xhtml]]";'
}

Quotes{
        ->(extends)Optional
        #[order]:Integer = '2'
        title 'Quotes'
        h1 'Quotes of Famous Chess Players'
        #content:String ='~ return "[[=quotes.xhtml]]";'
}
PawnGame{
        ->(extends)Optional

        #suitability:Boolean = '${Pawn#visited} > 0'

        #[order]:Integer = '3'
        title 'Pawn Game'
        h1 'The Pawn Game'
        #content:String ='~ return "[[=pawngame.xhtml]]";'
        #pawngamesuit:String ='~ return "[[=xml/suitable.xhtml]]";'
}

Professional{
        ->(extends) General
        ->(child) Tactics2
        ->(child) Openings2
        ->(child) Quiz
        ->(child) Clock
        ->(child) Tips
        ->(child) Repertoire
        #[order]:Integer = '4'
        title 'Professional'
        #suitability:Boolean = '
            (${Notation#visited} > 0 || ${KnowledgeQuiz#alge_knowledge} > 99) 
            && 
            (${KnowledgeQuiz#piece_knowledge} > 99 || ${IntroductionOfTheChessPieces#visitedAllChilds})
            &&
            !(${->(prereq)#visited} == 0 && ${->(prereq)}.length != 0)
        ' 
        h1 'Tutorial for advanced players'
	#content:String = '~ return "[[=xml/prof/professional.xhtml]]";'
        #prof:String = '~ return "[[=xml/prof/prof.xhtml]]";'

}
Tactics2{
        ->(extends) Professional
        ->(child) Forks
        ->(child) Pinning
        ->(child) Skewers
        ->(child) Uncovering
        ->(child) Remdef
        ->(child) Overloading
        ->(child) Deflection
        ->(child) Decoying
        #[order]:Integer = '1'
        title 'Tactics'
        h1 'Tutorial for professional players'
        #content:String = '~ return "[[=xml/prof/tactics.xhtml]]";'

}
Forks{
        ->(extends) Professional
        #[order]:Integer = '1'
        title 'Forks'
        h1 'Forks'
	#content:String ='~ return "[[=xml/prof/forks.xhtml]]";'

}
Pinning{
        ->(extends) Professional
        #[order]:Integer = '2'
        title 'Pinning'
        h1 'Pinning'
        #content:String ='~ return "[[=xml/prof/pinning.xhtml]]";'

}
Skewers{
        ->(extends) Professional
        #[order]:Integer = '3'
        title 'Skewers'
        h1 'Skewers'
        #content:String ='~ return "[[=xml/prof/skewers.xhtml]]";'

}
Uncovering{
        ->(extends) Professional
        #[order]:Integer = '4'
        title 'Uncovering'
        h1 'Discovered Attack and Discovered Check'
        #content:String ='~ return "[[=xml/prof/uncover.xhtml]]";'

}
Remdef{
        ->(extends) Professional
        #[order]:Integer = '5'
        title 'Remove defender'
        h1 'Remove the defender'
        #content:String ='~ return "[[=xml/prof/remdef.xhtml]]";'

}
Overloading{
        ->(extends) Professional
        #[order]:Integer = '6'
        title 'Overloading'
        h1 'Overloading'
        #content:String ='~ return "[[=xml/prof/overload.xhtml]]";'

}
Deflection{
        ->(extends) Professional
        #[order]:Integer = '7'
        title 'Deflection'
        h1 'Deflection'
        #content:String ='~ return "[[=xml/prof/deflection.xhtml]]";'

}
Decoying{
        ->(extends) Professional
        #[order]:Integer = '8'
        title 'Decoying'
        h1 'Decoying'
        #content:String ='~ return "[[=xml/prof/decoy.xhtml]]";'

}
Openings2{
        ->(extends) Professional
        ->(child) OpeningSurvey2
        ->(child) OpeningSurvey3
        ->(child) OpeningSurvey4
        ->(child) OpeningSurvey5
        ->(child) OpeningSurvey6
        #[order]:Integer = '2'
        title 'Some openings'
        h1 'Tutorial for professional players'
        #content:String ='~ return "[[=xml/prof/opening.xhtml]]";'

}
OpeningSurvey2{
        ->(extends) Professional
        #[order]:Integer = '6'
        title 'Kings Indian Defence'
        h1 'Kings Indian Defence'
        #content:String ='~ return "[[=xml/prof/opening_3.xhtml]]";'

}
OpeningSurvey3{
        ->(extends) Professional
        #[order]:Integer = '7'
        title 'Nimzo-Indian Defence'
        h1 'Nimzo-Indian Defence'
        #content:String ='~ return "[[=xml/prof/opening_4.xhtml]]";'

}
OpeningSurvey4{
        ->(extends) Professional
        #[order]:Integer = '2'
        title 'Benko Gambit'
        h1 'Benko Gambit'
        #content:String ='~ return "[[=xml/prof/opening_1.xhtml]]";'

}
OpeningSurvey5{
        ->(extends) Professional
        #[order]:Integer = '8'
        title 'Queens Gambit'
        h1 'Queens Gambit'
        #content:String ='~ return "[[=xml/prof/opening_5.xhtml]]";'

}
OpeningSurvey6{
        ->(extends) Professional
        #[order]:Integer = '5'
        title 'Gruenfeld Defence'
        h1 'Gruenfeld Defence'
        #content:String ='~ return "[[=xml/prof/opening_2.xhtml]]";'
}
Quiz{
        ->(extends) Professional
        #[order]:Integer = '3'
        title 'Best move quiz'
        h1 'Tutorial for professional players'
        #content:String ='~ return "[[=placeholder.xhtml]]";'

}
Clock{
        ->(extends) Professional
        #[order]:Integer = '4'
        title 'The chess clock'
        h1 'Use of the chess clock'
        #content:String ='~ return "[[=xml/prof/clock.xhtml]]";'
        #suitability = '~ return true;'
}
Tips{
        ->(extends) Professional
        ->(child) WinningTips
        ->(child) ImprovingTips
        #[order]:Integer = '5'
        title 'Tips'
        h1 'Tips'
        #content:String ='~ return "[[=xml/prof/tips.xhtml]]";'

}
WinningTips{
        ->(extends) Professional
        #[order]:Integer = '2'
        title 'Winning tips'
        h1 'Winning tips'
        #content:String ='~ return "[[=xml/prof/winningtips.xhtml]]";'

}
ImprovingTips{
        ->(extends) Professional
        #[order]:Integer = '1'
        title 'Improving tips'
        h1 'Improving tips'
        #content:String ='~ return "[[=xml/prof/improvingtips.xhtml]]";'

}
Repertoire{
        ->(extends) Professional
        ->(child) Repertoire1
        ->(child) Repertoire2
        ->(child) Repertoire3
        ->(child) Repertoire4
        ->(child) Repertoire5
        ->(prereq) Openings2
        #[order]:Integer = '7'
        title 'Opening repertoire'
        h1 'Systems against some openings'
        #content:String ='~ return "[[=xml/prof/rep.xhtml]]";'

}
Repertoire1{
        ->(extends) Professional
        ->(prereq) OpeningSurvey4
        #[order]:Integer = '1'
        title 'Benko Gambit'
        h1 'A system against Benko Gambit'
        #content:String ='~ return "[[=xml/prof/rep_1.xhtml]]";'

}
Repertoire2{
        ->(extends) Professional
        ->(prereq) OpeningSurvey6
        #[order]:Integer = '2'
        title 'Gruenfeld defence'
        h1 'An aggressive system against the Gruenfeld Defence'
        #content:String ='~ return "[[=xml/prof/rep_2.xhtml]]";'

}
Repertoire3{
        ->(extends) Professional
        ->(prereq) OpeningSurvey2
        #[order]:Integer = '3'
        title 'Kings Indian Defence'
        h1 'A system against the Kings Indian Defence'
        #content:String ='~ return "[[=xml/prof/rep_3.xhtml]]";'

}
Repertoire4{
        ->(extends) Professional
        ->(prereq) OpeningSurvey5
        #[order]:Integer = '5'
        title 'Queens Gambit'
        h1 'An agressive system against the Queens Gambit Declined.'
        #content:String ='~ return "[[=xml/prof/rep_5.xhtml]]";'

}
Repertoire5{
        ->(extends) Professional
        ->(prereq) OpeningSurvey3
        #[order]:Integer = '4'
        title 'Nimzo-Indian Defence'
        h1 'An solid aggressive and simple system against the Nimzo-Indian Defence'
        #content:String ='~ return "[[=xml/prof/rep_4.xhtml]]";'

}